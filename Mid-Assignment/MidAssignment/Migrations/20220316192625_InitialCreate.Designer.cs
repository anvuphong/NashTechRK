// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MidAssignment.Data;

#nullable disable

namespace MidAssignment.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220316192625_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MidAssignment.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Conan Doyle",
                            BookName = " Sherlock Holmes",
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Hailey",
                            BookName = "Detective",
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Simon Spurrier",
                            BookName = "CODA",
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Kurt Busiek",
                            BookName = "MARVELS",
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Bram Stoker",
                            BookName = "Dracula",
                            CategoryId = 3
                        },
                        new
                        {
                            BookId = 6,
                            Author = "J. R. R. Tolkien",
                            BookName = "The Hobbit",
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("MidAssignment.Entities.BookRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<DateTime>("DateOfRequest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessByUserId")
                        .HasColumnType("int");

                    b.Property<int>("RequestByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("ProcessByUserId");

                    b.HasIndex("RequestByUserId");

                    b.ToTable("BookRequest");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            DateOfRequest = new DateTime(2021, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestByUserId = 3,
                            Status = 0
                        },
                        new
                        {
                            RequestId = 2,
                            DateOfRequest = new DateTime(2022, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessByUserId = 1,
                            RequestByUserId = 3,
                            Status = 2
                        },
                        new
                        {
                            RequestId = 3,
                            DateOfRequest = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProcessByUserId = 2,
                            RequestByUserId = 4,
                            Status = 1
                        });
                });

            modelBuilder.Entity("MidAssignment.Entities.BookRequestDetail", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("RequestId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookRequestDetail");

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            BookId = 1
                        },
                        new
                        {
                            RequestId = 1,
                            BookId = 2
                        },
                        new
                        {
                            RequestId = 1,
                            BookId = 3
                        },
                        new
                        {
                            RequestId = 2,
                            BookId = 3
                        },
                        new
                        {
                            RequestId = 2,
                            BookId = 4
                        },
                        new
                        {
                            RequestId = 3,
                            BookId = 5
                        },
                        new
                        {
                            RequestId = 3,
                            BookId = 6
                        });
                });

            modelBuilder.Entity("MidAssignment.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Detective Book"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Comic"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Novel"
                        });
                });

            modelBuilder.Entity("MidAssignment.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "12345678",
                            RoleId = 1,
                            UserName = "mrA"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "12345678",
                            RoleId = 1,
                            UserName = "mrB"
                        },
                        new
                        {
                            UserId = 3,
                            Password = "12345678",
                            RoleId = 2,
                            UserName = "mrC"
                        },
                        new
                        {
                            UserId = 4,
                            Password = "12345678",
                            RoleId = 2,
                            UserName = "mrD"
                        },
                        new
                        {
                            UserId = 5,
                            Password = "12345678",
                            RoleId = 2,
                            UserName = "mrE"
                        });
                });

            modelBuilder.Entity("MidAssignment.Entities.Book", b =>
                {
                    b.HasOne("MidAssignment.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MidAssignment.Entities.BookRequest", b =>
                {
                    b.HasOne("MidAssignment.Entities.User", "ProcessBy")
                        .WithMany("BookProcessRequests")
                        .HasForeignKey("ProcessByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MidAssignment.Entities.User", "RequestBy")
                        .WithMany("BookRequests")
                        .HasForeignKey("RequestByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessBy");

                    b.Navigation("RequestBy");
                });

            modelBuilder.Entity("MidAssignment.Entities.BookRequestDetail", b =>
                {
                    b.HasOne("MidAssignment.Entities.Book", "Book")
                        .WithMany("Details")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MidAssignment.Entities.BookRequest", "BookRequest")
                        .WithMany("Details")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookRequest");
                });

            modelBuilder.Entity("MidAssignment.Entities.Book", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("MidAssignment.Entities.BookRequest", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("MidAssignment.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("MidAssignment.Entities.User", b =>
                {
                    b.Navigation("BookProcessRequests");

                    b.Navigation("BookRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
